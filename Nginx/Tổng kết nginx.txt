# Basic
Nginx làm web server chặn DDoS, load balancer, xử lý 10000 kết nối đồng thời mà chiếm ít bộ nhớ, mã hóa SSL, cache txt css ảnh tĩnh trả dữ liệu luôn để k cần gọi tới server.
Cloudflare chống DDoS tốt nên có thể kết hợp dùng như 1 lớp reverse proxy trước nginx, cứ cần thêm cái gì thì add nó như 1 lớp reserve proxy forward liên tục tới đích là được.



# Config Nginx 
URL search: https://viblo.asia/p/tim-hieu-va-huong-dan-setup-web-server-nginx-OREGwBwlvlN

nginx -t => lệnh check cú pháp của file nginx đang dùng có chuẩn không
nginx -t -c /etc/nginx/nginx.conf => lệnh check cú pháp của 1 file nginx config cụ thể có chuẩn không

-> Nginx có thể có nhiều file config và thường thì nó tự nạp tất cả file .conf trong thư mục như /etc/nginx/conf.d/
Đặt tên tuỳ ý nhưng nên code server khác nhau trong các file config để k xảy ra trường hợp đè nhau hay ưu tiên lấy cái nào trước.
Có thể chỉ định thêm các file nào với "include". Cơ chế nó nối nội dung các file config vào mà thôi.

-> Các module trong file:
- http: các chỉ thị từ tất cả các module liên quan đến HTTP. Có thể tạo nhiều khối và các khối chỉ thị sau sẽ đè lên trước.
- server: khai báo 1 website (hostname) cụ thể được nhận diện bởi nginx và cấu hình của nó. Khối này nằm trong khối http, default là hostname localhost gửi lại file index.html
- upstream: xác định 1 nhóm các server
- location: định nghĩa các thiết lập áp dụng cho 1 vị trí cụ thể của URL website. Khối location có thể dùng trong khối server or nằm chồng trong 1 khối location khác
=> VD ta tạo khối http cấu hình web và bên trong có nhiều khối server, mỗi khối server ta định nghĩa các tên miền mà website có. Bên trong đó lại có nhiều khối location định nghĩa các uri khớp với 1 mẫu nào thì thiết lập cái gì

-> Các chỉ thị
--> Cấu hình HOST và SOCKET
Cú pháp: listen [address] [:port] [additional options];
listen: dùng trong khối server, địa chỉ ip và port được dùng bởi socket phục vụ website. Thường là 80 cho http và 443 cho https. 
Các [additional options]:
- default hoặc default_server: chỉ rõ khối server này được dùng như website mặc định cho bất kỳ yêu cầu nhận được tại địa chỉ IP và port được chỉ rõ
- ssl: dùng SSL
- gửi lời gọi đến hệ thống bind và listen: backlog=num, rcvbuf=size, sndbuf=size, accept_filter=filter, deferred, setfib=number, và bind
VD: listen 192.168.1.1:80;
listen 443 ssl; # k có address tự hiểu localhost

Cú pháp: server_name hostname1 [hostname2…];
server_name: dùng trong khối server để đăng ký 1 or nhiều hostname cho khối server. Khi nhận request, nó sẽ lấy khối server đầu tiên khớp với host trong phần header của request, k khớp thì Nginx chọn khối server đầu tiên khớp với thông số của listen như port 80 rồi ưu tiên khối đầu tiên có tùy chọn mặc định cho phép trên chỉ thị listen
VD: server_name *.website.com; # nhận tất cả các domain có đuôi là .website.com
server_name .website.com; # Kết hợp cả *.website.com và website.com
Có thể dùng chuỗi rỗng như 1 giá trị của chỉ thị để bắt tất cả các yêu cầu không có giá trị Host trong phần header, nhưng chỉ sau ít nhất 1 tên thông thường (hoặc “_”).
VD: server_name abc.com “”; hoặc server_name _ “”; => _ tức là mọi domain. 

--> Cấu hình HTTPS:
VD: server {
  listen 80 default_server;
  server_name _;
  return 301 https://$host$request_uri;
}
=> Return 301 thì browser hiểu là đổi đường dẫn vĩnh viễn về HTTPS. Nó sẽ redirect mọi truy vấn tới HTTPS cho mọi domain. Or ta có thể chỉ redirect 1 server nào đó. VD:
server {
  listen 80;
  server_name example.com;
  return 301 https://example.com$request_uri;
}

--> Cấu hình đường dẫn và tài liệu:
Cú pháp: root /path/resource/; => Giá trị mặc định là html
root: sử dụng trong khối server, http, location, if; định nghĩa tài liệu gốc, chứa các tập tin muốn gửi khách

--> Cấu hình các request từ client:
keepalive_requests: sử dụng trong khối server, http, location; xác định tối đa số lượng yêu cầu được phục vụ trên 1 kết nối keep-alive. Giá trị mặc định là 100
VD: keepalive_requests 100;

--> MIME types: Multipurpose Internet Mail Extensions là chuẩn mô tả định dạng của các loại tệp.
types: dùng trong khối server, http, location. VD: 
types {
  text/html html;
  image/gif gif;
  image/jpeg jpg;
}
Khi xử lý 1 tệp sẽ check đuôi tệp để quyết định loại MIME. Rồi gửi loại type đó trong phần Content-Type của response, để báo trình duyệt cách xử lý tệp tin.
VD: loại MIME của tập tin là application/pdf thì browser sẽ dùng 1 plugin tương ứng với loại MIME đó để đọc mà k cần tải tập tin đó về.
Nginx có 1 file mime.types chứa sẵn các phần mở rộng tệp tin quan trọng thường dùng mà ta có thể bao hàm nội dung của nó vào file conf với: include mime.types; chứ k cần thêm thủ công từng type. Nếu phần mở rộng k tìm thấy sẽ dùng loại mặc định được ghi trong chỉ thị default_type.

--> VD setting gzip cho static file giúp giảm thiểu cost IO và đường truyền.
http {
  gzip              on;
  gzip_http_version 1.0;
  gzip_types        text/plain
                    text/html
                    text/xml
                    text/css
                    application/xml
                    application/xhtml+xml
                    application/rss+xml
                    application/atom_xml
                    application/javascript
                    application/x-javascript
                    application/x-httpd-php;
  gzip_disable      "MSIE [1-6]\.";
  gzip_disable      "Mozilla/4";
  gzip_comp_level   1;
  gzip_proxied      any;
  gzip_vary         on;
  gzip_buffers      4 8k;
  gzip_min_length   1100;
}
Có thể setting cache control để cache static file để tối ưu.

--> Bth client tạo kết nối TCP tới server thì sau khi nhận response sẽ đóng kết nối, thêm keepalive vào upstream giúp giữ TCP connection để reuse cho requests sau. VD 1 user gửi nhiều requests để lấy cả static resource thì nên dùng:
upstream app {
  server 127.0.0.1:5000;
  keepalive 16;
}

-> Dùng $uri: biến chỉ phần của url đằng sau domain name
VD gửi lại người dùng default GIF file nếu file k tồn tại:
location /images/ {
  try_files $uri $uri/ /images/default.gif;
}
location = /images/default.gif {
  expires 30s;
}
=> Người dùng request http://www.domain.com/images/image1.gif => nginx sẽ tìm image1.gif trong chỉ thị root or alias xác định từ trước, nếu k có nó sẽ tìm trong image1.gif/ và k tìm thấy sẽ lấy tiếp /images/default.gif => nó sẽ chuyển sang chạy chỉ thị location thứ 2 và dừng process, nginx sẽ lấy file đó và đánh dấu trong cache trong 30s 

VD2 try_files $uri =404; lấy $uri nếu k tồn tại sẽ trả 404



# NGINX làm Load Balancer
upstream backend {
  server backend1.example.com max_fails=3 fail_timeout=15s;
  server backend2.example.com;
}
backend1 mà failed request 3 lần liên tiếp sẽ bị đánh dấu là k khả dụng trong 15s tiếp theo, sau 15s nginx sẽ ping thử server, nếu vẫn k khả dụng sẽ lại down 15s và cứ thế, khi down, mọi request đi vào backend2.

-> Default là round robin:
VD config trên máy 10.10.10.1 là:
http {
  upstream proserver { 
    server 10.10.10.9:9002;
    server 10.10.10.10:9002;
  } 
  server { # 2 server chạy ở cổng 9002. Rồi config để máy 10.10.10.1 đón ở cổng 9000
    proxy_buffering off;
    client_max_body_size 5M;
    listen 9000;
    location / {
      proxy_pass http://proserver;
    }
  }
}
=> Chạy NGINX bằng lệnh sudo service nginx restart là done. Khi gửi request về 10.10.10.1 sẽ redirect vào 10.10.10.9 or 10.10.10.10

-> Weighted Round Robin theo độ ưu tiên:
http {
  upstream proserver {
    server 10.10.10.9:9002 weight=1;
    server 10.10.10.10:9002 weight=2; # 10.10.10.10 sẽ xử lý lưu lượng truy cập gấp đôi 10.10.10.9 và được ưu tiên gửi vào trước
  } 
  server {
    listen 80;
    server_name nginx-tutorial.test;
    location / {
      proxy_pass http://backend_servers;
    }       
  }
}

-> Least Connections => nginx trả phí. Còn có thuật toán least time cũng bản trả phí
http {
  upstream backend_servers {
    least_conn;
    server localhost:3000;
    server localhost:3001;
    server localhost:3002;
  } 
  server {
    listen 80;
    server_name nginx-tutorial.test; # set server-name phải đk 1 tên miền sẵn rồi
    location / {
      proxy_pass http://backend_servers; # proxy_pass làm máy chủ chặn reverse proxy. Nó xác định tất cả lưu lượng được redirect đến. 
    }       
  }
}
=> gửi tới server có ít connection nhất. Có thể tính cả trường weight. 3 server mà lượng kết nối như nhau cx sẽ quay tuần tự thôi. 

-> IP hash:
http {
  upstream backend_servers {
    ip_hash;
    server localhost:3000;
    server localhost:3001;
    server localhost:3002;
    server backend3.example.com down; # down là flag đánh dấu 1 máy chủ đang k khả dụng
  } 
  server {
    listen 80;
    server_name nginx-tutorial.test;
    location / {
      proxy_pass http://backend_servers;
    }       
  }
}
=> ip_hash dựa vào ip của client lần trước connection như nào lần này vào tiếp server đó. Nếu máy chủ đó hỏng mới chuyển cho máy chủ khác.



# Dùng nginx chống DDoS
1 số config chỉ có trên nginx plus, k dùng được trên nginx thường
Trước tiên, nginx có kiến trúc non-blocking và event-driven vốn đã có thể xử lý 1 lượng request khổng lồ đồng thời tốt hơn các loại máy chủ khác. Các yêu cầu mới không làm gián đoạn các phiên làm việc đang có của nginx nên bản thân nó đã ngăn chặn các cuộc tấn công cơ bản.

DDoS thì lưu lượng truy cập lớn từ 1 tập các IP cố định 1 lượng đủ để áp đảo máy chủ. Việc 1 nhóm lớn sử dụng forward proxy (VPN) cũng có biểu hiện tương tự nhưng lưu lượng vẫn thấp hơn nhiều so với các cuộc tấn công DDoS. 
Khi DDoS, heaer User-Agent thường là 1 giá trị non-standard k chuẩn, header Referer thường là 1 giá trị có thể liên kết với cuộc tấn công.

-> Giới hạn số lượng request 1 ip chỉ được gửi sau mỗi 2s.
limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;
server {
  # ...
  location /login.html {
    limit_req zone=one;
    # limit_req zone=one burst=5 
  # ...
  }
}
=> limit_req_zone định cấu hình 1 vùng nhớ chung gọi là one lưu trạng thái các request cho key là $binary_remote_addr (ip của máy khách). zone one lưu state của request từ 1 ip và giới hạn 30 request trong 1 phút.
Mọi request tới server vào url /login.html sẽ dùng zone one. zone one lưu max 10MB data.
burst=5: nếu 100 request vào đồng thời thì 1 request được xử lý trong 2s, 5 request được đưa vào buffer, 94 request đưa vào queue (hoặc drop), tất cả bị delay lại để meet với tốc độ 1r/2s để k sập server.

-> Giới hạn số lượng kết nối đến 1 vùng chỉ định của trang web
limit_conn_zone $binary_remote_addr zone=addr:10m;
server {
  # ...
  location /store/ {
    limit_conn addr 10;
    # ...
  }
}
=> limit_conn_zone định cấu hình 1 vùng nhớ chung là "addr" lưu các yêu cầu có key là ip của client là $binary_remote_addr, lưu max 10MB data. Ở đây nó limit 1 ip gọi tới vùng /store/ của trang web chỉ được max 10 connection đồng thời. Tức nếu ip gọi 11 request đồng thời thì 1 request reject

-> Hacker có xu hướng dùng các kết nối ghi dữ liệu thường xuyên vì chúng muốn giữ connection càng lâu càng tốt cho nặng server. Các connection chậm này có thể được chặn lại. Slowloris là 1 VD của kiểu tấn công này. 
server {
  client_body_timeout 5s;
  client_header_timeout 5s;
  # ...
}
=> client_body_timeout kiểm soát thời gian nginx đợi để nhận được body của client. client_header_timeout kiểm soát thời gian nginx đợi để nhận được header của client. 
Ở đây nếu quá 5s mà chưa nhận được, nginx sẽ đóng kết nối phiên hiện tại và cho rằng yêu cầu bị hủy bỏ và thực hiện xử lý khác. Vì nếu nginx đợi quá lâu sẽ giảm performance trong việc nhận connection mới

-> Chặn ip với nginx
location / {
  deny 123.123.123.0/28;
  # ...
}
=> Phải làm thủ công nếu check log thấy 1 ip là hacker DDoS

Trong 1 số TH ta chỉ dựng server cho 1 lượng ip cụ thể
location / {
  allow 192.168.1.0/24;
  deny all;
  # ...
}

Chặn mọi IP:
location /foo.php {
  deny all;
}
=> Sau khi cuộc tấn công DDoS nhắm vào /foo.php, mọi request vào nó nên được chặn lại. Ta có thể fix or chuyển sang 1 location khác.

location / {
  if ($http_user_agent ~* foo|bar) { => ~* là ss regex không phân biệt hoa thường, chứa foo hoặc bar
    return 403;
  }
  # ...
}
=> Header User-Agent có giá trị bất thường so với các truy cập hợp lệ khác có thể bị chặn. Tương tự với các request có header Referer

-> Dùng caching trong nginx để giảm tải cho server khi request trùng nhau gọi lại nhiều lần.
Trước tiên cấu hình 1 proxy cache: 
proxy_cache_path /path/to/cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m; => 1 proxy cache chạy tại url /path/to/cache với max dung lượng 10GB và thời gian hoạt động là 60p. Tham số levels xác định cấu trúc thư mục, ở đây cache được lưu dưới 1 thư mục cấp 1 và 1 thư mục cấp 2, cấu trúc như v giúp tăng hiệu suất khi truy cập cache.

Dùng proxy_cache_use chỉ định khi nào cache nên được cập nhật:
location / {
  proxy_cache my_cache;
  proxy_cache_valid 200 302 10m;
  proxy_cache_use stale updating error timeout;
  proxy_pass http://backend;
}
=> Dùng cache tên là my_cache xác định khi khởi tạo. Thời gian hiệu lực của các response mã 200 và 302 là 10p, các phản hồi với mã khác sẽ k được lưu trong cache. 
Còn proxy_cache_use stale updating error timeout; xác định các tùy chọn sử dụng cache trong trường hợp cache không khả dụng or gặp sự cố:
- stale: sử dụng cache cũ nếu cache không có bản sao mới nhất của tài nguyên
- updating: sử dụng cache cũ trong quá trình cập nhật nếu cache vẫn đang được cập nhật bởi 1 yêu cầu khác
- error: vẫn sử dụng cache với yêu cầu lỗi và k thể nhận phản hồi từ server
- timeout: vẫn sử dụng cache nếu request timeout và k nhận phản hồi từ server backend

-> Giới hạn kết nối tới backend server
upstream website {
  server 192.168.100.1:80 max_conns=200;
  server 192.168.100.2:80 max_conns=200;
  queue 10 timeout=30s;
}
=> max_conns chỉ trong nginx plus. Ở đây ta giới hạn không quá 200 kết nối đến mỗi server backend đồng thời. Chỉ thị queue giới hạn lượng yêu cầu đợi khi mọi máy chủ trong nhóm upstream đạt max kết nối, timeout chỉ định thời gian 1 yêu cầu đợi. VD ở đây quá 410 kết nối đồng thời sẽ từ chối, queue quá timeout cũng từ chối và pop khỏi queue
=> Nginx Plus cũng có thể nhận biết 1 cuộc tấn công DDoS thông qua Status or Dashboard, nó show số liệu và các mẫu lưu lượng bất thường để có thể thực hiện các actions cụ thể



# Cache trong nginx advance
Browser có bfcache sẵn tối ưu cho static file, còn files như html js luôn lấy realtime. Có thể code server bth or config nginx để custom cache này thoải mái => ít dùng
VD: client request file app.js -> server gửi lại cho client -> 2p sau client lại cần file app.js -> server check file đó k có gì thay đổi -> client lấy từ cache của trình duyệt Ta phải cấu hình nginx sao cho client k cần gửi thêm bất cứ request nào lên server nx mà vẫn có file app.js mà k sợ nó đã bị cũ trên server.

- C1: Weak Caching Header (Etag / Last-Modified) phải request lên server để check sự thay đổi của các tài nguyên
1.1> Last-Modified => Lần đầu tiên thì server gửi file logo.png kèm tham số last-modified ở response là thời điểm cuối cùng thay đổi của file. Lần tiếp theo request client có thêm If-Modified-Since là giá trị của them số Last-Modified lần trước nhận dược, server check nếu trùng với thời gian thay đổi lần cuối trên server thì trả lại 304 Not Modified để báo cho client biết file này éo đổi gì cả, client sẽ lấy bản sao được lưu cache browser
1.2> Etag => Tương tự nhưng dùng chuỗi ký tự để check sự thay đổi của file thông qua request header If-None-Match và response Header Etag chứ éo nhất thiết phải là 1 mốc tg. Thực tế, server k lưu lại giá trị Etag để lôi ra check như là Last-Modified mà nó dùng thuật toán để tính ra Etag trong spec của HTTP, điều này giúp server hạn chế update Etag mỗi lần file đổi
- C2: Strong Caching Header (Expires / Cache-Control) thì trình duyệt tự biết expires chưa quá thì lấy.
2.1> Expires => VD: expires 5m; => file hết hạn trong 5p mặc kệ client có request lên server k
2.2> Cache-Control => thêm các option sau expires trong file cấu hình:
no-store => file luôn được trả về theo cách thông thường, k lưu trong cache trình duyệt
no-cache => cache sẽ gửi yêu cầu đến máy chủ để xác thực r mới tiến hành sao chép lưu trong trình duyệt (cache but revalidate)
private/public => public cho phép file được cache bởi các proxy và server trung gian; private thì browser có thể cache nhưng proxy thì k, chỉ cho phép file có giá trị khác nhau cho các client khác nhau.
max-age=12355 => thời gian tối đa mà tài nguyên còn hạn sử dụng với cache
must-revalidate => buộc client phải validate với server trước khi sử dụng các file đã được caching
VD: Cache-Control "public, no-cache, max-age=12355, must-revalidate";
=> Laravel mix còn đánh dấu sự thay đổi của file ngay trong tên file. VD: A.123456.js or a.js?v=123456 làm tên cho file

Cần tránh lỗi, VD đặt expires sau 5p nhưng file bị đổi trước đó dẫn đến người dùng nhận lại tài nguyên cũ => các file js, css là những file thường xuyên thay đổi nên dùng giải pháp Etag; các file ảnh, font chữ là file ít đổi nên dùng expires 5p.
Thực tế các server config mặc định là dùng etag caching cho tất cả file nên ta phải sửa lại VD file config của nginx:
server {
  listen 80;
  server_name xxxxx; 
  root xxxxx; 

  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-XSS-Protection "1; mode=block";
  add_header X-Content-Type-Options "nosniff";

  index index.html index.htm index.php;

  charset utf-8;

  location / {
    try_files $uri $uri/ /index.php?$query_string;
  }

  location ~ \.php$ {
    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
    include fastcgi_params;
  }

  location ~* \.(?:css|js)$ {
    access_log        off;
    log_not_found     off;

    etag on; // Bật chế độ cache Etag
  }

  location ~* \.(?:jpg|jpeg|gif|png|ico|xml)$ {
    access_log        off;
    log_not_found     off;

    expires           5m; // Bật chế độ cache expires
    add_header        Cache-Control "public"; // Caching cả cho proxy
  }

  location ~* \.(?:eot|woff|woff2|ttf|svg|otf) {
    access_log        off;
    log_not_found     off;

    expires           5m;  // Bật chế độ cache expires
    add_header        Cache-Control "public"; // Caching cả cho proxy
    add_header        Access-Control-Allow-Origin *;

    types     {font/opentype otf;}
    types     {application/vnd.ms-fontobject eot;}
    types     {font/truetype ttf;}
    types     {application/font-woff woff;}
    types     {font/x-woff woff2;}
  }

  location ~ /\. { 
    access_log        off; 
    log_not_found     off; 
    deny              all; 
  }
}



# Dùng log trong nginx
-> Chỉ thị error_log: error_log log_file [ log_level ] => log_level là mức ghi log thấp nhất mà ta muốn ghi lại: debug, info, notice, warn, error, crit, alert, emerg
Khi chỉ định log_level, nó sẽ ghi log từ cấp độ đó đến cấp độ cao hơn cấp độ đó, mở file log_file để thấy nó ghi lại những gì trong quá trình server chạy
Trên ubuntu có thể dùng cho error_log /dev/null crit; thì /dev/null là nơi để chọn thì error_log sẽ k ghi lại bất cứ thứ gì

-> Chỉ thị access_log: access_log /path/to/log/location [ format_of_log buffer_size ]; => giống error_log nhưng ghi theo mỗi request mà client tạo ra. 
VD: http {
  log_format log_format custom_format '$remote_addr - $remote_user [$time_local]'
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent"'; 
  access_log /var/log/nginx/access.log custom_format;
  server {
    ...
  }
}
=> Từng phần của log_format bắt đầu bằng $. Nó sẽ ghi ra log các biến mà ta xác định trong cặp ""
Danh sách các biến hỗ trợ: http://nginx.org/en/docs/http/ngx_http_core_module.html#variables 
buffer_size là kích thước cache.

VD: access_log location format gzip; => để nén log file
VD: access_log off; => tắt ghi log

-> Để tránh đầy dung lượng đĩa thì phải xoay log. Đó là việc chuyển đổi các file log và có thể lưu trữ file cũ trong 1 khoảng tg nhất định. 
VD: mv /path/to/access.log /path/to/access.log.0 => di chuyển log hiện tại sang 1 file mới để lưu trữ, có thể đặt nó là .0 và file cũ hơn là .1
kill -USR1 `cat /var/run/nginx.pid` => gửi tín hiệu reload các file log khiến content ghi vào file được làm mới. nginx.pid là nơi lưu trữ pid của quy trình chính (linux). 
sleep 1 => xoay log xong ta sleep 1 để hoàn tất, ta có thể nén file cũ or làm gì tùy ý.
[ post-rotation processing of old log file ]

Cách khác để xoay vòng là dùng logrotate: nó là chương trình cài sẵn trên ubuntu và nginx trên ubuntu đi kèm với tập lệnh logrotate tùy chỉnh => bỏ



# Other
-> Tool https://github.com/matsuu/kataribe giúp phát hiện bottleneck, kết hợp với nginx nhưng phải enable => uncomment phần log_format và access_log của file config


