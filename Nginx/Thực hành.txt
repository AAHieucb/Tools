# VD cấu hình Nginx làm reverse proxy cho Apache trên Ubuntu
Dùng Let's Encrypt và PHP
URL: https://galaxyz.net/cach-cau-hinh-nginx-lam-web-server-va-reverse-proxy-reverse-proxy-cho-apache-tren-mot-server-ubuntu-1804.388.anews
URL: https://galaxyz.net/cach-cau-hinh-nginx-lam-reverse-proxy-cho-apache.3086.anews



//!!!!!!!
# Thực hành dùng pm2 tạo nhiều instance của server, tạo hẳn 3 cái server của nodejs và dùng nginx để cân bằng tải 4 server này
=> ref tới "UseNginx / nginx-loadbalancer"

-> Dùng pm2: npm install pm2
pm2 list
pm2 stop id
pm2 delete id
pm2 delete all
pm2 start file.js -f
pm2 restart app.js 
pm2 logs
pm2 flush => xóa logs đã có
pm2 startup ubuntu => nếu server reboot thì pm2 tự động chạy lại luôn chứ ta kp chạy thủ công lại
pm2 unstartup ubuntu
-> để pass args vào file.js, ta phải dùng file.json để file.js có thể lấy thông qua process.argv[2]
=> pm2 start file.json --only <name>

Chạy: pm2 start process.json app-dev => sẽ chạy tất cả các cái có tên app-dev, app-dev1,..

-> cấu hình config cho nginx làm cân bằng tải có 4 server.
-> mở cmd vào url có file nginx.exe 
-> chạy: taskkill /f /im nginx.exe để tắt các nginx cũ
-> chạy: start nginx.exe để restart cái nginx 

-> Các cách cấu hình cân bằng tải
- RoundRobin quay vòng:
http {
  upstream backend_servers {
    server localhost:3000;
    server localhost:3001;
    server localhost:3002;
  } 
  server {
    listen 80;
    server_name localhost; # Trong linux ta đổi tên được bằng cách đi vao etc/host
    location / {
      proxy_pass http://backend_servers;
    }       
  }
}

Weighted Round Robin theo độ ưu tiên:
http {
  upstream backend_servers {
    server localhost:3000 weight=1;
    server localhost:3001 weight=3;
    server localhost:3002 weight=2;
  } 
  server {
    listen 80;
    server_name nginx-tutorial.test;
    location / {
      proxy_pass http://backend_servers;
    }       
  }
}
=> cái 3001 có độ ưu tiên cao nhất nên sẽ ưu tiên gửi vào 3001 trước

Least Connections:
http {
  upstream backend_servers {
    least_conn;
    server localhost:3000;
    server localhost:3001;
    server localhost:3002;
  } 
  server {
    listen 80;
    server_name nginx-tutorial.test;
    location / {
      proxy_pass http://backend_servers;
    }       
  }
}
=> gửi tới server có ít connection nhất. 3 server mà lượng kết nối như nhau cx sẽ quay tuần tự thôi

IP hash:
http {
  upstream backend_servers {
    ip_hash;
    server localhost:3000;
    server localhost:3001;
    server localhost:3002;
  } 
  server {
    listen 80;
    server_name nginx-tutorial.test;
    location / {
      proxy_pass http://backend_servers;
    }       
  }
}
=> dựa vào ip của client lần trước connection như nào lần này vào tiếp server đó

Ngoài ra còn thuật toán least time chỉ dùng được ở bản trả phí của nginx
=> Tùy bài toán mà thuật toán dùng khác nhau VD ứng dụng cần tính toán nhiều cho mỗi request như convert video online thì dùng least time tối ưu nhất

=> Ta có thể tiếp tục bao hosting bên ngoài nó để host cái web nodejs này lên public bằng cách dùng VPS -> khi đã có VPS thì vào terminal cửa số của VPS thì nhét dự án này của ta vào đó và trong file config của nginx nhớ đổi: server_name <YourVPSIpAddress>; và ta có thể truy cập public được website của ta
Khi có VPS, ta có thể đăng nhập để dùng terminal của cái VPS đó, mặc định thg là ubuntu. Ta sẽ cài nodejs, npm như mới trong cái ubuntu đó và copy dự án của ta vào để chạy thôi. Nhiều nền tảng VPS hỗ trợ sẵn nodejs và npm thì k cần cài thủ công nữa or vẫn phải cài cho đúng phiên bản

--> Lệnh proxy_pass trong cấu hình nginx làm cho máy chủ chặn reverse proxy. Nó xác định tất cả lưu lượng sẽ được redirect đến đâu
Còn cái server-name thật ra muốn set phải có 1 tên miền sẵn rồi, phải đk từ trước

--> Dùng pm2 với frontend: PM2 có thể dùng cả frontend và backend thoải mái
Dùng tương tự với dự án react chỉ hơi khác 1 tí là PM2 ta k chạy file js bth mà lệnh npm start thực chất cần chạy thành: pm2 start node_modules/react-scripts/scripts/start.js là xong



# Other
-> Forward Proxy là trung gian cho client liên hệ với bất kỳ máy chủ nào thì Reverse Proxy là trung gian cho các máy chủ liên kết với nó có thể được liên lạc bởi bất cứ client nào. Nó kiểm soát yêu cầu của client và lọc nếu hợp lệ sẽ chuyển đến service thích ứng

-> Lệnh "curl url" trên cmd ok nhưng trên VSC k hđ, phải dùng gitbash mới được

-> .dockerignore sẽ bỏ những file nào trong quá trình build image từ Dockerfile
.prettierignore và .eslintignore được dùng để xác định file nào sẽ k tự động format code và lint báo lỗi. 
Trong prettierignore cần bỏ các file k thuộc ngôn ngữ js, html, css. Trong eslintignore chỉ bỏ vài file build ra thôi vì cần check hết. Trong gitignore bỏ tất cả các file tự sinh ra khi dùng dự án và file .env. Trong dockerignore bỏ các file mà có thể tự sinh ra khi dùng dự án, các thứ dùng cho dev mà k dùng cho production vì nó chỉ chạy 1 phát production luôn.



# Setup dự án NodeJS deploy hoàn chỉnh Cloud DigitalOcean + NodeJS Express Web App + Custom Domain + Reverse Proxy Nginx + SSL certbot (DevOps)

URL: https://www.youtube.com/watch?v=oykl1Ih9pMg

Các bước:
Tạo 1 dự án NodeJS và push lên github -> vào Digital Ocean create droplet -> chọn hệ điều hành ubuntu và các thông tin khác -> chọn SSH keys và hostname là tạo được 1 cloud server
=> Cloud Server thì có loại này có loại khác. VD như Digital Ocean cho ta vào hẳn commandline hệ điều hành của VPS trong khi Heroku k làm được v mà phải thông qua git của heroku, do đó k thể dùng nginx kết hợp với Heroku bth

-> Mở terminal bình thường: ssh root@<ip address cung từ VPS của digital ocean>. Phải có password tài khoản (có thể dùng tk user bth k cần dùng root) -> Thế là truy cập được vào terminal linux của VPS -> sudo apt update -> cài node và npm: sudo apt install nodejs -> tạo app và clone từ github về trên máy ảo(chứ kp command copy nào ở đây cả) -> vào app -> npm install
=> Từ đây có thể chạy node app.js và từ public, ta có thể mở browser: <ip của VPS>:<port> ok rồi. Nhưng ta k muốn cái url xàm lol thế này nên phải dùng thêm nginx

-> npm install -g pm2 -> pm2 start app.js -> app sẽ run ở background -> pm2 startup reboot để server reboot thì app sẽ backup -> có thể reboot để khởi động lại VPS luôn, sau đó pm2 tự chạy chứ k cần phải start thủ công nx vì dùng lệnh trên r

=> Trước khi dùng nginx ta sẽ enable firewall trên VPS
-> "ufw status" xem trạng thái firewall hiện tại -> ufw enable để mở firewall nhưng nó sẽ disrupt cái ssh connection hiện tại -> ufw allow ssh -> kêt nối lại connection đó -> ufw status sẽ thấy port 22/tcp được mở vì đó là của SSH mà ta đang sử dụng -> vào lại app thấy k chạy vì firewall k mở port 5000 như trước
=> Và ta cũng k cần mở port 5000 nữa mà cái ta cần là port 80 và 143 cơ để nginx sẽ tự forward 5000 cho ta

-> ufw allow http -> ufw allow https -> ufw status sẽ thấy mở thêm 80 và 143 -> sudo apt install nginx -> nginx tự được mở vào ip của server sẽ thấy -> mở file config ở: /etc/nginx/sites-available/default và sửa location / ra proxy_pass http://localhost:5000 và các setting khác -> server_name thêm 2 phiên bản url và www.url vào nginx -> save và sudo nginx -t để check -> sudo service nginx restart -> vào lại trang web ở ip của VPS chả cần port nx cũng tự vào trang web của ta

-> Để có cái url server_name kia ta dùng bất cứ 1 nền tảng nào giúp đk tên miền, VD namecheap -> đăng ký 1 domain miễn phí

=> Bh ta có 1 domain và ip của VPS từ digitalocean. Ta cần hợp nó lại
-> vào networking của digitalocean thêm cái domain vào để digitalocean quản lý DNS -> tạo record cho các domain 2 phiên bản thường thì dùng dấu @ và www để digitalocean xác định url nào thì redirect vào app nào của ta -> từ trang tạo domain ở đây là namecheap, ta phải thêm custom server name vào là: ns1/ns2/ns3.digitalocean.com -> mất 1 khoảng thời gian để DNS server update nó thì ta vào url của ta là nó vào đúng app luôn
=> Ở đây cơ chế là: vào url của ta -> DNS server gọi đến nhà cung cấp namecheap xác định server name digitalocean, gửi đến server đó rồi digitalocean gọi đến app của ta trong dự án của digital ocean gọi vào bên trong với cái url kia -> nginx bắt được đầu tiên sẽ chạy các khối http và server bên trong thì thấy khối có server_name trùng được thực thi gọi vào khối location redirect đến localhost:5000 của VPS mà cổng 5000 đang dược chạy bởi PM2 chạy 1 nodejs server bắt http request gửi trả thông tin vè lại client

-> sudo add-apt-repository ppa:certbot/certbot -> sudo apt update -> sudo apt-get install python-certbot-nginx -> sudo certbot --nginx -d yourdomain.site -d www.yourdomain.site -> điền các thông tin và chọn option tự động redirect vào https khi truy cập http -> bh trang web của ta đã secure SSL -> SSL cerfiticate tự hết hạn sau 90 ngày nên phải chạy command sau để tự động gia hạn mỗi 90 ngày k cần làm thủ công: certbot renew --dry-run 

=> 1 số đặc điểm: có thể có nhiều server và dùng nginx làm load balancing; ở đây có nginx nên đã có thể xử lý 1 lượng truy cập lớn rồi; nếu VPS sập và nhà cung cấp khởi động lại, k cần lo vì PM2 tự động start lại cho ta chứ ta k cần canh chừng vc đó mà làm thủ công; SSL tự động gia hạn nên chả khác nào vĩnh viễn mà hoàn toàn free; VPS sẽ mất tiền nếu dùng lâu hết hạn, tốt nhất là trả phí hoặc dùng server riêng chứ k dùng free như v 
=> Dùng Heroku cũng như google firebase v, k mở terminal của hệ điều hành của nó để chạy nginx được mà chỉ là 1 hosting k config được thôi
=> Digital Ocean chỉ là 1 công cụ cung VPS, tức cung 1 cái máy có ip public. Ta có thể dùng laptop cá nhân thay thế VPS này bằng cách: public ip laptop ra ngoài, ghép tên miền từ namecheap với ip laptop đó, chạy server nodejs và nginx trên máy laptop như bth.



# Certbot
Chỉ là 1 tool tự động quá trình cài đặt và cập nhật chứng chỉ SSL/TLS từ Let's Encrypt, một tổ chức cung cấp chứng chỉ SSL/TLS miễn phí.
Nó mã nguồn mở được phát triển bởi Electronic Frontier Foundation (EFF).

Nó tự động hóa cấp chứng chỉ, cài chứng chỉ, gia hạn, và hỗ trợ các tính năng bảo mật như HSTS và OCSP Stapling.



