# Basic
Dev[Docker pull, docker run...] -> Docker[Docker deamon, image <-- container] <-> Docker registry (docker hub)

-> docker -- version
docker info
docker => liệt kê lệnh con
docker <lệnh> --help 

-> .dockerignore



# Tổng kết dùng lệnh docker
-> image:
docker images => liệt kê image đang có. Image có sẵn trong hub.docker.com
docker search <tên image muốn tìm> => search trên terminal, nên dùng các phiên bản official
docker inspect <tên or id image or container> -> hiển thị chi tiết 1 image or container

docker pull <tên image>:<tên version> => tên phiên bản trên hub.docker.com phần tag. VD: docker pull nginx:1.25
docker pull <tên image> => k có tag phiên bản or tag là :latest sẽ tự tải về phiên bản mới nhất

docker run 
  -it => optional, -i để interact được với container, -t là tương tác bằng terminal
  -e <tên biến môi trường>=<giá trị biến môi trường> => optional
  --name "<tên đặt cho container>" => optional
  --network <tên network> => optional, chạy image thành container thì connect vào network luôn
  -p -8888:80 => optional, ánh xạ cổng 80 trong docker thành 8888 ngoài host.
  source=<tên ổ đĩa>,target=/home/disk2 => optional, đồng bộ folder /home/disk2 trên container và thư mục của 1 ổ đĩa ảo có từ trước. 
  -v <path tới folder trên host / tên volumn>:<path của nó tương ứng trên container> => optional, thay thế source/target, đồng bộ container folder với volumn or folder trên host
  -h <tên host container đó> => optional, set 1 hostname cho container, nó là hostname unique cho container trong network mà nó đang chạy
  --volumns-from <tên container1> <tên image>:<tag> => optional, chạy image tạo container có cấu trúc thư mục của container1 và luôn đồng bộ.
  --rm => optional, container tự bị remove ngay khi chạy xong lệnh và dừng
  ubuntu:<phiên bản> => hoặc không có version, hoặc dùng <id của image>
  <lệnh> <tham số của lệnh> => chạy container và thực hiện 1 lệnh r dừng container luôn
VD: docker run --rm ubuntu echo "Hello" => Tạo container từ image ubuntu, r chạy echo "Hello", chạy xong và container dừng thì docker tự động xóa container đó.
VD: docker run -it -v /Users/Desktop/folder:/home/folder ff85 thì container được tạo ra từ image có id bắt đầu bằng ff85 sẽ có thư mục home/folder và bên trong có content y hệt content trên thư mục desktop/folder của máy host. Mọi sửa đổi của container trên folder thì folder của host cũng tự cập nhập ngay lập tức và k bị mất khi xóa container về sau
=> Folder máy host, volumn, folder container có thể đồng bộ realtime cho nhau. Thường chỉ dùng volumn khi các container muốn share data thôi, k thì cứ bind trực tiếp container và máy host. Nếu ổ đĩa gắn với máy host r, thì bind luôn ổ đĩa vói container là được. Chỉ cần dùng -v thay cho source/target

docker ps -a => hiện mọi container đang chạy, -a là hiện mọi container kể cả container đã tắt
CTRL+P, CTRL+Q => thoát terminal của container nhưng k tắt container
docker attach <id or tên container> => vào lại terminal tương tác của container đang chạy, chỉ có 1 terminal đó

docker exec <tên container đang chạy> <lệnh muốn chạy trên container đó> => gọi chạy lệnh trên container từ ngoài máy host (k cần vào terminal container đó)
docker exec -it <tên container> bash => lệnh bash thực chất là mở terminal ở 1 tiến trình khác giống attach. Nếu từ cái này mà exit thì container vẫn hoạt động vì nó chạy 2 tiến trình bash cùng tên và mới exit 1 cái còn 1 cái chạy bởi hàm run vẫn đang chạy
exit => gọi trong terminal của container để dừng cái tiến trình đó, còn nếu dùng trên bash thì container vẫn chạy ở tiến trình khác

docker stop <id or tên container> => container đang chạy sẽ dừng lại
docker start <id or tên của container> => chạy 1 container đã exit trước đó (chưa xóa)
docker restart <tên container>
docker rm -f <id or tên container> => rm là xóa 1 container đã exit, nhưng -f sẽ xóa container đó dù đang chạy hay không

docker image rm ubuntu:16.04 => xóa image đã có
docker image rm <id của image muốn xóa chỉ cần vài chữ cái đầu> -> xóa image, thêm -f để ép xoá image nếu có container của nó đang chạy.

docker commit <tên or id container> <tên image tự đặt>:<tên version tự đặt> => Trong 1 container mà ta cài nhiều thứ xong mỗi lần xóa thì container đó mất or exit xong tắt máy thì container cx mất. Lệnh commit sẽ lưu thành image mới trong docker để lần sau chạy image đã lưu đó là có luôn container, k cần setup lại.
docker save --output <link tới file>/<tên file tự đặt>.tar <id or tên image> => biến image thành file riêng k lưu trong docker nx, có thể share file cho người khác 
docker load -i <link tới file image>.tar => load file thành image k có tên và tag
docker tag <id của image> <tên tự đặt>:<tag tự đăt> => đặt tên và tag mới cho image
docker image history <id or tên image> => hiển thị quá trình hình thành custom image này từ image cơ sở

docker diff <tên or id container> => xem từ thời điểm tạo ra cho đến h thì container này đã thay đổi cấu trúc file như thế nào
docker stats <container> <container> => giám sát tài nguyên mà các container tiêu tốn thời gian thực. Nếu k liệt kê container nó sẽ tự giám sát tất cả
docker logs --tail 10 <tên container> => kiểm tra 10 dòng logs cuối của container nào
docker logs -f <tên or id container> => terminal sẽ chờ thao tác gì đó với container này thì logs sẽ bắt theo thời gian thực

-> volume: Ổ đĩa ảo ta tạo ra. Có thể gắn với nhiều container để dùng chung data. Xoá container ổ đĩa k ảnh hưởng. Ổ đĩa chỉ mất khi chủ động xoá nó với rm.
docker volume create
  -opt type=none => type=none là không dùng kiểu thiết bị đặc biệt, chỉ muốn bind một thư mục local bình thường từ host, ko phải loop, tmpfs, hay network fs
  -opt device=/User/... => là path trên máy host. Ổ đĩa sẽ ánh xạ tới thư mục trong host.
  -opt o=bind => kiểu mount là bind, tức là đồng bộ trực tiếp giữa host và container.
  <tên ổ đĩa tự đặt> => tạo ổ đĩa ảo

docker volume ls => liệt kê các ổ đĩa. 
docker volume inspect <tên ổ đĩa> => xem thông tin ổ đĩa nào
docker volume rm <tên ổ đĩa>

-> network: 1 container chạy bth kxđ network sẽ tự động vào default network đầu tiên trong list.
docker network ls -> list ra các network trong docker
docker network inspect <tên network> -> xem thông tin network, có các container nào.
docker inspect <tên or id container> -> xem thông tin của container có cả network mà container này đang chạy trên đó
docker network create --driver bridge <tên network> -> tạo ra 1 mạng cầu trong hệ thống. Có thể tạo ra nhiều network trong docker bên trong có nhiều container để cách ly các container này với container mạng khác. VD ping sang container mạng khác sẽ k có gì
docker network rm <tên network>
docker network connect <tên network> <tên container> => kết nối 1 network vào 1 container đang chạy. Nhiều container kết nối vói nhau khi connect chung 1 network.

--> 2 container cùng thuộc 1 network có thể tương tác với nhau. Còn tương tác ra bên ngoài như nào tùy vào việc ánh xạ cổng ra ngoài như nào.

VD: vào terminal của container linux
- ping <id container khác ở trong network đó> => Có thể phải cài apt-get update && apt-get install iputils-ping -y mới có ping. Trong docker, chỉ cần dùng id container sẽ tự hiểu là ping tới ip address của container khác trong mạng. 
- ls /bin/ -la => hiển thị mọi lệnh có trong container đó. Dùng inspect là thấy cái ipv4 của container, vì mỗi container có 1 ip riêng.

VD: docker chạy container httpd lắng nghe request gửi đến ở cổng 80. Ở trong 1 container linux khác: wget -O -<địa chỉ ip của http server của container trước> (web request tự gọi vào cổng 80) -> nó sẽ gửi trả về nội dung bên trong server. Có thể tạo file index.html bên trong server httpd thì wget sẽ biên dịch và hiển thị file html đó trên powershell luôn => Tức container linux call api tới container web server httpd (trong cùng 1 network mặc định)
Tuy nhiên khi 1 container khởi tạo http server thì bên ngoài máy host k truy cập được server đó. Để làm được ta phải ánh xạ cổng 80 của container sang any cổng chưa dùng ở host như 8888, thì mở browser với 127.0.0.1:8888 sẽ hiện ra index.html

VD mô phỏng 3 máy độc lập chạy 3 ứng dụng ở 3 network khác nhau: mỗi network trong docker giống như 1 mạng LAN, ta tạo 3 mạng LAN rồi trên mỗi mạng có các máy chạy độc lập. Máy A chạy mysql ở 1 cổng, máy B chạy php ở 1 cổng, mỗi container như 1 máy tính độc lập có ip và cổng riêng, tương tác với nhau qua port và ip address như bth.



# Dùng Dockerfile
Dockerfile lưu quá trình tạo container từ image vào 1 file, cả việc vài đặt và chạy container ra port.
Exp là nên gọi npm i trong Dockerfile chứ k nên copy cả vào Dockerfile

-> VD usecase tạo image myimage:v1 từ image centos có sẵn, cài sẵn vài package htop, vim, httpd và thi hành nền httpd khi container chạy.

C1 chỉ dùng commandline build thành 1 image:
- docker pull centos
- docker run -it --name cent centos 
- yum update => lệnh update để có thể cài các gói vào centos 
- yum install httpd httpd-tools -y 
- httpd -v => check có httpd chưa
- yum install vim
- yum install epel-release => htop là lệnh nằm trong các gói package mở rộng mà ta phải cài gói này trước
- yum update -y => vì cài xong gói mở rộng phải update lại 
- yum install htop -y, r chạy htop

- Bổ sung task là copy thư mục test.html ở trong máy vào trong 1 thư mục ở trong container
Dùng window container: Thoát ra terminal của host. Trong window bị lỗi deamon phải exit container rồi dùng cp rồi lại start container lại mới được. Ở TH này window container vẫn cho copy file nhưng thư mục trên container phải tạo hết từ trước nếu không sẽ báo lỗi directory k tồn tại: 
docker cp <link tới file(window phải dùng folder) test>.html <tên container>:<link trên container các thư mục phải có từ trước>
VD "docker cp ./MyImages/test.html cent:/var/www/html/" là copy file test.html vào thư mục html. Còn "docker cp ./MyImages/test.html cent:/var/www/html" là sinh ra file html ở trong thư mục www có nội dung giống file test.html => tránh nhầm

- Để lưu thành image: exit dừng container -> docker commit cent myimage:v1 -> có thể xóa container cent k cần nx -> chạy container từ myimage: docker run --rm -p 9876:80 myimage:v1 httpd -D FOREGROUND  => thì -rm vì khi nào dừng là xóa container luôn, -D là để nó chạy nền, mở browser cổng 9876 là vào được httpd -> các thư mục ta copy nó sẽ tự tìm đến file đó và lấy nên ta mở /test.html sẽ thấy
Có thể copy file dự án từ local vào docker, build thành image rồi push lên docker hub. Khi đó bất cứ ai pull image về chạy đều có thể có cả dự án luôn mà k cần lên github nữa => thường thì vẫn dùng github lưu dự án kèm Docker

=> Lưu ý 1 container chạy httpd và 1 container hđh centos cài package httpd là khác nhau. Khi dùng docker với httpd, bản chất nó chạy httpd trên 1 hđh linux tối giản, chỉ có các thứ cần thiết cho httpd, các gói yum hay apt và các lệnh của os sẽ k có trong image đó. 
=> Thường thì ta dùng nhiều image độc lập tương tác trong 1 network, quản lý với docker compose, thay vì dùng 1 image và cài nhiều thú lên đó.

C2 dùng Dockerfile config quá trình xây container rồi build thành 1 image luôn:
Tạo Dockerfile -> tải extension Dockerfile về để có highlight cú pháp -> code Dockerfile -> docker build -t <tên image k được viết hoa>:<tag> -f Dockerfile <link tới thư mục docker file, nếu là thư mục hiện tại thì để dấu chấm là được> => thế là có image
Giả sử tạo lại image như bên trên thì ta chạy container nó tự có thư mục mặc định chứa test.html và chạy httpd sẵn r nên ta chỉ cần: docker run -p 6789:80 myimage:v1, bật máy tính cổng 6789 ra để thấy file test.html => vì ở đây httpd chạy ở port 80 của centos, ta phải chạy port 80 của centos ra port 6789 của host os mới thấy được.

-> docker build bị lỗi ở 1 bước, khi build lại sẽ chạy tiếp từ bước đó nếu k có thay đổi, nó có cache từng bước build.

Mẹo:
COPY package.json .
RUN npm install
COPY . .
RUN npm run build
=> Khi thay đổi code, docker sẽ k chạy lại npm i vì docker check package.json k đổi nên dùng cache k thực hiện loại

-> Dockerfile có multistage giúp giảm kích thước image cuối cùng. 

VD: 
# Stage 1: Build
FROM node:18 AS builder
WORKDIR /app
COPY . . 
RUN npm install && npm run build
# Stage 2: Run
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
=> stage sau vẫn dùng data của stage trước, nhưng cuối cùng production dùng data stage cuối với kích thước nhỏ, k bao gồm node_modules và các file phụ.



# Dùng docker-compose
Dockerfile + docker build chỉ là biến từ 1 image thành 1 image khác, chạy ra 1 container. Còn docker-compose tạo 1 hệ thống nhiều container là các image khác nhau.
docker-compose cũng giúp combine nhiều Dockerfile lại.

-> Command docker-compose:
docker compose down -> xóa các thành phần chạy bằng docker-compose up
docker compose ps -> hiện các container chạy bằng lệnh up (option -a)
docker compose ps --service -> hiện các service của docker-compose đang chạy
docker compose stop -> dừng nhưng k xóa
docker compose start -> chạy cái docker-compose đã stop
docker compose restart
docker compose images -> xem docker đang chạy được tạo ra từ những images nào
docker compose exec my-php bash -> my-php là tên container đang chạy bởi docker-compose, bash là tên lệnh chạy trên container đó
docker compose logs <tên các container chạy bằng docker-compose, nếu k có sẽ đọc logs ở mọi dịch vụ đang chạy> 

-> Usecase dùng docker compose tạo ra 3 dịch vụ mysql, httpd, php. Đồng thời 3 dịch vụ tạo ra trong cùng 1 network và ổ đĩa để chia sẻ dữ liệu.
container php-product chạy từ image PHP:7.3-fpm trên cổng 9000 cài mysqli, pdo_mysql và thư mục làm việc là /home/sites/site1
container c-httpd01 chạy từ container httpd của apache trên cổng 80 và 443, có sửa file config của nó gọi đến php-product khi dùng file.php và thư mục làm việc là /home/sites/site1
container mysql-product chạy cổng 3304 và chỉnh file config dùng authentication kiểu cũ, có ánh xạ database, có password, và tạo ra user siteuser mk là sitepass, database riêng db_site để thao tác
Hệ thống có dùng chung 1 network nat có tên my-network và ổ đĩa có tên dir-site đồng bộ dữ liệu trên máy host là /dockercompose/source/
Hệ thống là 1 webserver có 3 dịch vụ như v sẽ chạy được website bằng wordpress trên hệ thống này mặc định hiện ra index.html -> ở đây dùng joomla thay thế wordpress

Chia mỗi service 1 dockerfile. Tạo docker file cho php:
  docker-php-ext-install mysqli pdo_mysql
Trích xuất file httpd.conf của httpd ra và sửa là dùng container php-product khi gặp .php, sửa thư mục mặc định nx:
  /usr/local/apache2/conf/httpd.conf
  AddHandler "proxy:fcgi://<tên container php fpm>:9000" .php
Tương tự trích xuất my.cnf của mysql và chỉnh authentication -> tạo thư mục lưu database:
  /etc/mysql/my.cnf
  default-authentication-plugin=mysql_native_password
  /var/lib/mysql
Tạo docker-compose.yml
docker compose up -> tự chạy các lệnh trong file có tên docker-compose.yml -> phải ở cùng cấp thư mục chứa file đó -> mở cổng 9999 sẽ thấy dịch vụ -> tải mã nguồn joomla về -> giải nén và nhét vào source/sites1 -> mở web và cài đặt như wordpress thôi -> làm theo hướng dân của loomja là xong -> login tk admin

-> Docker biến môi trường kết hợp nodejs, có thể specific biến môi trường cho docker-compose trong file .env ở cùng cấp thư mục dự án nodejs. Nếu dùng ở 1 file với tên khác thì phải dùng kiểu:
services:
  myservice:
    env_file:
      - ./env_vars.txt
=> Các biến môi trường đó sẽ được dùng trong code nodejs lấy từ process.env.<>



# Các container mạnh
swag: container giúp reverse proxy + SSL
Watchtower: 1 container dùng trong hệ thống có nhiều docker container. Nó chạy trong background luôn đảm bảo image newest version, tự check, update image, reboots container

-> Alpine: container lý tưởng cho web server, nó là linux dựa trên busybox đơn giản.
RUN apk add --no-cache git => apk add <tên gói> để cài 1 gói mới vào alpine với --no-cache là k cache ở command build image.
RUN npm install --production --silient => npm install là cài các package nhưng --production tức nó bỏ qua các package trong devDependencies, còn --silent là k log output khi install



# Other 
-> Docker Machine: https://xuanthulab.net/tao-va-quan-ly-cac-may-docker-machine.html
Docker là 1 phần mềm hỗ trợ containerize
Dockerfile giúp tạo 1 images chạy thành 1 container
docker-compose giúp quản lý 1 hệ thống có nhiều container tương tác chia sẻ ổ đĩa trong mạng.
Docker Machine là tool phụ tạo ra máy ảo chuyên dùng cho docker, khác với virtual box là tạo máy ảo nói chung => k còn được dùng kể từ khi k8s ra đời
Docker Swarm giúp gom và quản lý nhiều container trên nhiều máy ảo thành 1 cụm cluster => sắp lỗi thời và thế bởi K8s
K8s mạnh hơn Docker Swarm nữa, nó còn có thể quản lý nhiều cụm cluster khác nhau qua kubeconfig.

-> Dừng:
Dùng Docker Swarm ok trong mô hình vừa và nhỏ
Còn có docker layer, layer caching, multistage build trong docker, tối ưu bộ nhớ.


